import random
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_CHATS = [int(chat_id) for chat_id in os.getenv("ALLOWED_CHATS", "").split(",") if chat_id]

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    "count": None,
    "low": None,
    "high": None,
    "numbers": [],
    "history_msg_id": None,
    "chat_id": None
}

def check_chat(message: types.Message) -> bool:
    return message.chat.id in ALLOWED_CHATS

async def is_admin(message: types.Message) -> bool:
    if not check_chat(message):
        return False
    admins = await bot.get_chat_administrators(message.chat.id)
    return message.from_user.id in [admin.user.id for admin in admins]

@dp.message(Command("gstart"))
async def gstart_command(message: types.Message):
    if not await is_admin(message):
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (Gbingo).\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üé≤ /gbingo N min max ‚Äî –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "üî¢ /gnum X ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å X —Å—Ç—Ä–æ–∫ (–æ—Ç 1 –¥–æ 5)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/gbingo 5 1 100\n"
        "/gnum 3"
    )

@dp.message(Command("gbingo"))
async def gbingo_command(message: types.Message):
    if not await is_admin(message):
        return
    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /gbingo N min max\n–ü—Ä–∏–º–µ—Ä: /gbingo 5 1 100")
            return

        count, low, high = map(int, parts[1:])
        if not (1 <= count <= 100):
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
        if low < 1 or high > 1000 or low >= high:
            await message.answer("‚ö†Ô∏è –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 –∏ min < max")
            return

        game_state.update({"count": count, "low": low, "high": high,
                           "numbers": [], "history_msg_id": None, "chat_id": message.chat.id})

        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
            f"üìå –î–∏–∞–ø–∞–∑–æ–Ω: {low} ‚Äî {high}\n"
            f"üìú –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."
        )
        msg = await message.answer("üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:")
        game_state["history_msg_id"] = msg.message_id
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞!")

@dp.message(Command("gnum"))
async def gnum_command(message: types.Message):
    if not await is_admin(message):
        return
    try:
        if game_state["count"] is None:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /gbingo N min max")
            return

        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /gnum X (–æ—Ç 1 –¥–æ 5)")
            return

        rows = int(parts[1])
        if not (1 <= rows <= 5):
            await message.answer("‚ö†Ô∏è X –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return

        total_needed = rows * game_state["count"]
        numbers = [str(random.randint(game_state["low"], game_state["high"])) for _ in range(total_needed)]
        game_state["numbers"].extend(numbers)

        # –Ω–æ–≤—ã–µ —á–∏—Å–ª–∞
        new_lines = ["; ".join(numbers[i:i+game_state["count"]]) for i in range(0, len(numbers), game_state["count"])]
        result_new = "\n".join(new_lines)

        # –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è
        all_lines = ["; ".join(game_state["numbers"][i:i+game_state["count"]]) for i in range(0, len(game_state["numbers"]), game_state["count"])]
        result_all = "üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:\n" + "\n".join(all_lines)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        try:
            await bot.edit_message_text(chat_id=game_state["chat_id"], message_id=game_state["history_msg_id"], text=result_all)
        except Exception:
            msg = await message.answer(result_all)
            game_state["history_msg_id"] = msg.message_id

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await message.answer(f"–û—Ç–∫—Ä—ã—Ç–æ –ª–∞–π–Ω–æ–≤ {rows}\n\n{result_new}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /gnum 3")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
