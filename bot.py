import os
import random
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_CHATS = [int(x) for x in os.getenv("ALLOWED_CHATS", "").split(",") if x]
SUPERUSER_ID = int(os.getenv("SUPERUSER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    "count": None,
    "low": None,
    "high": None,
    "numbers": [],
    "history_msg_id": None,
    "chat_id": None
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ "–∂—ë—Å—Ç–∫–æ–≥–æ" —Å–æ–æ–±—â–µ–Ω–∏—è
async def check_allowed(message: types.Message) -> bool:
    if message.chat.id in ALLOWED_CHATS:
        return True
    else:
        await message.reply("–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π, –≤—ã –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏. –ü–∏—à–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_admin(message: types.Message) -> bool:
    if not await check_allowed(message):
        return False
    admins = await bot.get_chat_administrators(message.chat.id)
    return message.from_user.id in [admin.user.id for admin in admins]

# –ö–æ–º–∞–Ω–¥–∞ /gstart
@dp.message(Command("gstart"))
async def gstart_command(message: types.Message):
    if not await is_admin(message):
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (Gbingo).\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üé≤ /gbingo N min max ‚Äî –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "üî¢ /gnum X ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å X —Å—Ç—Ä–æ–∫ (–æ—Ç 1 –¥–æ 5)\n"
        "üîé /gsrch X ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–æ–≥–¥–∞ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ X (–¥–ª—è –≤—Å–µ—Ö)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/gbingo 5 1 100\n"
        "/gnum 3\n"
        "/gsrch 42"
    )

# –ö–æ–º–∞–Ω–¥–∞ /gbingo
@dp.message(Command("gbingo"))
async def gbingo_command(message: types.Message):
    if not await is_admin(message):
        return
    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /gbingo N min max\n–ü—Ä–∏–º–µ—Ä: /gbingo 5 1 100")
            return
        count, low, high = map(int, parts[1:])
        if not (1 <= count <= 100) or low < 1 or high > 1000 or low >= high:
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        game_state.update({
            "count": count,
            "low": low,
            "high": high,
            "numbers": [],
            "history_msg_id": None,
            "chat_id": message.chat.id
        })
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nüìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\nüìå –î–∏–∞–ø–∞–∑–æ–Ω: {low} ‚Äî {high}\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."
        )
        msg = await message.answer("üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:")
        game_state["history_msg_id"] = msg.message_id
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /gnum
@dp.message(Command("gnum"))
async def gnum_command(message: types.Message):
    if not await is_admin(message):
        return
    if game_state["count"] is None:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /gbingo N min max")
        return
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /gnum X (–æ—Ç 1 –¥–æ 5)")
            return
        rows = int(parts[1])
        if not (1 <= rows <= 5):
            await message.answer("‚ö†Ô∏è X –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return
        total_needed = rows * game_state["count"]
        low, high = game_state["low"], game_state["high"]
        if total_needed > (high - low + 1):
            numbers = [random.randint(low, high) for _ in range(total_needed)]
        else:
            numbers = random.sample(range(low, high + 1), total_needed)
        game_state["numbers"].extend(numbers)
        new_lines = ["; ".join(map(str, numbers[i:i+game_state['count']])) 
                     for i in range(0, len(numbers), game_state["count"])]
        result_new = "\n--------\n".join(new_lines)
        all_lines = ["; ".join(map(str, game_state["numbers"][i:i+game_state["count"]])) 
                     for i in range(0, len(game_state["numbers"]), game_state["count"])]
        result_all = "üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:\n" + "\n--------\n".join(all_lines)
        try:
            await bot.edit_message_text(
                chat_id=game_state["chat_id"], 
                message_id=game_state["history_msg_id"], 
                text=result_all
            )
        except TelegramBadRequest:
            msg = await message.answer(result_all)
            game_state["history_msg_id"] = msg.message_id
        await message.answer(f"–û—Ç–∫—Ä—ã—Ç–æ {rows} —Å—Ç—Ä–æ–∫:\n\n{result_new}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /gnum 3")

# –ö–æ–º–∞–Ω–¥–∞ /gsrch ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
@dp.message(Command("gsrch"))
async def gsrch_command(message: types.Message):
    if not await check_allowed(message):
        return
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /gsrch X\n–ü—Ä–∏–º–µ—Ä: /gsrch 42")
            return
        target = int(parts[1])
        positions = []
        for idx, num in enumerate(game_state["numbers"]):
            if num == target:
                line = idx // game_state["count"] + 1
                pos = idx % game_state["count"] + 1
                positions.append((line, pos))
        if positions:
            text = "\n".join([f"–°—Ç—Ä–æ–∫–∞ {line}, –ø–æ–∑–∏—Ü–∏—è {pos}" for line, pos in positions])
            await message.answer(f"üîé –ß–∏—Å–ª–æ {target} –≤—ã–ø–∞–ª–æ:\n{text}")
        else:
            await message.answer(f"‚ùå –ß–∏—Å–ª–æ {target} –µ—â—ë –Ω–µ –≤—ã–ø–∞–¥–∞–ª–æ.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")

# –ö–æ–º–∞–Ω–¥–∞ /gstats ‚Äî —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –õ–°
@dp.message(Command("gstats"))
async def gstats_command(message: types.Message):
    if message.from_user.id != SUPERUSER_ID:
        return
    try:
        await message.delete()
    except:
        pass
    if not game_state["numbers"]:
        await bot.send_message(SUPERUSER_ID, "‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return
    freq = {}
    for num in game_state["numbers"]:
        freq[num] = freq.get(num, 0) + 1
    sorted_freq = sorted(freq.items(), key=lambda x: int(x[0]))
    text = "üìä –ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è —á–∏—Å–µ–ª:\n" + "\n".join([f"{num}: {count}" for num, count in sorted_freq])
    await bot.send_message(SUPERUSER_ID, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
async def handle(request):
    if request.match_info.get('token') == BOT_TOKEN:
        data = await request.json()
        update = types.Update(**data)
        await dp.process_update(update)
        return web.Response()
    return web.Response(status=403)

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)

async def on_cleanup(app):
    await bot.delete_webhook()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
