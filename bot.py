import os
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from keep_alive import keep_alive

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_CHATS = [int(x) for x in os.getenv("ALLOWED_CHATS", "").split(",") if x]
SUPERUSER_ID = int(os.getenv("SUPERUSER_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    "count": None,
    "low": None,
    "high": None,
    "numbers": [],
    "history_msg_id": None,
    "chat_id": None,
    "forced_numbers": [],   # —Å–ø–∏—Å–æ–∫ –¥–æ 5 —á–∏—Å–µ–ª
    "forbidden_numbers": set()  # —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–∞–¥–∞—Ç—å
}

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
async def check_allowed(message: types.Message) -> bool:
    if message.chat.id in ALLOWED_CHATS:
        return True
    else:
        await message.reply("–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π, –≤—ã –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏. –ü–∏—à–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é")
        return False

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(message: types.Message) -> bool:
    if not await check_allowed(message):
        return False
    admins = await bot.get_chat_administrators(message.chat.id)
    return message.from_user.id in [admin.user.id for admin in admins]

# --- –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.message(Command("bingo"))
async def bingo_command(message: types.Message):
    if not await is_admin(message):
        return
    await message.answer(
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç IstockChat.

"
        "–ö–æ–º–∞–Ω–¥—ã:
"
        "üé≤ /bset N min max ‚Äî –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
"
        "üî¢ /line X ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å X –ª–∞–π–Ω–æ–≤ (–æ—Ç 1 –¥–æ 5)
"
        "üîé /num X ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–æ–≥–¥–∞ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ X (–¥–ª—è –≤—Å–µ—Ö)

"
        "–ü—Ä–∏–º–µ—Ä:
"
        "/bset 5 1 100
"
        "/line 3
"
        "/num 42"
    )

# --- /bset
@dp.message(Command("bset"))
async def bset_command(message: types.Message):
    if not await is_admin(message):
        return
    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /bset N min max\n–ü—Ä–∏–º–µ—Ä: /bset 5 1 100")
            return
        count, low, high = map(int, parts[1:])
        if not (1 <= count <= 100) or low < 1 or high > 1000 or low >= high:
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        game_state.update({
            "count": count,
            "low": low,
            "high": high,
            "numbers": [],
            "history_msg_id": None,
            "chat_id": message.chat.id,
            "forced_numbers": [],
            "forbidden_numbers": set()
        })
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nüìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\nüìå –î–∏–∞–ø–∞–∑–æ–Ω: {low} ‚Äî {high}\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."
        )
        msg = await message.answer("üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:")
        game_state["history_msg_id"] = msg.message_id
        await bot.pin_chat_message(message.chat.id, msg.message_id, disable_notification=True)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞!")

# --- /line
@dp.message(Command("line"))
async def line_command(message: types.Message):
    if not await is_admin(message):
        return
    if game_state["count"] is None:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /bset N min max")
        return
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /line X (–æ—Ç 1 –¥–æ 5)")
            return
        rows = int(parts[1])
        if not (1 <= rows <= 5):
            await message.answer("‚ö†Ô∏è X –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return

        total_needed = rows * game_state["count"]
        low, high = game_state["low"], game_state["high"]

        # –±–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–∞
        numbers = []
        while len(numbers) < total_needed:
            num = random.randint(low, high)
            if num not in game_state["forbidden_numbers"]:
                numbers.append(num)

        # –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–æ 5 —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
        if game_state["forced_numbers"]:
            for num in game_state["forced_numbers"][:5]:
                pos = random.randint(0, len(numbers)-1)
                numbers[pos] = num
            game_state["forced_numbers"] = []

        game_state["numbers"].extend(numbers)

        # –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        new_lines = [
            "; ".join(map(str, numbers[i:i+game_state['count']]))
            for i in range(0, len(numbers), game_state["count"])
        ]
        result_new = "\n--------\n".join(new_lines)

        # –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è
        all_lines = [
            "; ".join(map(str, game_state["numbers"][i:i+game_state["count"]]))
            for i in range(0, len(game_state["numbers"]), game_state["count"])
        ]
        result_all = "üìú –°–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª:\n" + "\n--------\n".join(all_lines)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        try:
            await bot.edit_message_text(
                chat_id=game_state["chat_id"],
                message_id=game_state["history_msg_id"],
                text=result_all
            )
        except:
            msg = await message.answer(result_all)
            game_state["history_msg_id"] = msg.message_id

        await message.answer(f"–û—Ç–∫—Ä—ã—Ç–æ –ª–∞–π–Ω–æ–≤ {rows}:\n\n{result_new}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /line 3")

# --- /num
@dp.message(Command("num"))
async def num_command(message: types.Message):
    if not await check_allowed(message):
        return
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /num X\n–ü—Ä–∏–º–µ—Ä: /num 42")
            return
        target = int(parts[1])
        positions = []
        for idx, num in enumerate(game_state["numbers"]):
            if num == target:
                line = idx // game_state["count"] + 1
                pos = idx % game_state["count"] + 1
                positions.append((line, pos))
        if positions:
            text = "\n".join([f"–°—Ç—Ä–æ–∫–∞ {line}, –ø–æ–∑–∏—Ü–∏—è {pos}" for line, pos in positions])
            await message.answer(f"üîé –ß–∏—Å–ª–æ {target} –≤—ã–ø–∞–ª–æ:\n{text}")
        else:
            await message.answer(f"‚ùå –ß–∏—Å–ª–æ {target} –µ—â—ë –Ω–µ –≤—ã–ø–∞–¥–∞–ª–æ.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")

# --- —Å–∫—Ä—ã—Ç–∞—è /force (–¥–æ 5 —á–∏—Å–µ–ª)
@dp.message(Command("force"))
async def force_command(message: types.Message):
    if message.chat.type != "private":
        return
    if message.from_user.id != SUPERUSER_ID:
        return
    try:
        parts = message.text.split()[1:]
        nums = [int(x) for x in parts]
        if not (1 <= len(nums) <= 5):
            await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç 1 –¥–æ 5 —á–∏—Å–µ–ª")
            return
        game_state["forced_numbers"] = nums
        await message.answer(f"‚úÖ –ß–∏—Å–ª–∞ {', '.join(map(str, nums))} –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞!")

# --- —Å–∫—Ä—ã—Ç–∞—è /forbid (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∏—Å–µ–ª)
@dp.message(Command("forbid"))
async def forbid_command(message: types.Message):
    if message.chat.type != "private":
        return
    if message.from_user.id != SUPERUSER_ID:
        return
    try:
        parts = message.text.split()[1:]
        nums = [int(x) for x in parts]
        if not nums:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /forbid X Y Z")
            return
        game_state["forbidden_numbers"].update(nums)
        await message.answer(f"üö´ –ß–∏—Å–ª–∞ {', '.join(map(str, nums))} –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞!")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
